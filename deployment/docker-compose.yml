version: '3'
services:
  reverse-proxy:
    image: traefik:latest
    restart: unless-stopped
    ports:
      - "${BDR_HTTP_PORT}:80"
    environment:
        - "TRAEFIK_API=true"
        - "TRAEFIK_INSECURE=true"
        - "TRAEFIK_PROVIDERS_DOCKER=true"
        - "TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  relational-database:
    image: postgres:latest
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${BDR_DB_USER}
      - POSTGRES_PASSWORD=${BDR_DB_PASSWORD}
      - POSTGRES_DB=blackduck-reports
    volumes:
      - relational-database:/var/lib/postgresql/data
  time-series-databases:
    image: prom/prometheus:latest
    restart: unless-stopped
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=PathPrefix(`/prometheus`)"
        - "traefik.http.routers.prometheus.entrypoints=web"
    volumes:
      - time-series-databases:/prometheus
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=PathPrefix(`/grafana`)"
        - "traefik.http.routers.grafana.entrypoints=web"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${BDR_GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana:/var/lib/grafana
    depends_on:
      - time-series-databases

volumes:
    relational-database: {}
    time-series-databases: {}
    grafana: {}
